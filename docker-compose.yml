version: '2.1'

services:
  zookeeper1:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zookeeper1
    container_name: zookeeper1-fc
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper1:2888:3888
      ALLOW_ANONYMOUS_LOGIN: "yes"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    container_name: kafka1-fc
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper1:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    depends_on:
      - zookeeper1
    volumes:
      - kafka-data1:/var/lib/kafka/data

  kafka2:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka2
    container_name: kafka2-fc
    ports:
      - "9093:9093"
      - "29093:29093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka2:19093,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9093,DOCKER://host.docker.internal:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper1:2181"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_BROKER_ID: 2
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    depends_on:
      - zookeeper1
    volumes:
      - kafka-data2:/var/lib/kafka/data

  kafka3:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka3
    container_name: kafka3-fc
    ports:
      - "9094:9094"
      - "29094:29094"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka3:19094,EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9094,DOCKER://host.docker.internal:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper1:2181"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_BROKER_ID: 3
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
    depends_on:
      - zookeeper1
    volumes:
      - kafka-data3:/var/lib/kafka/data

  kafka-ui-web:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui-web-fc
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    ports:
      - "8080:8080"
    restart: "no"
    environment:
      - KAFKA_CLUSTERS_0_NAME=new-cluster
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka1:19092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper1:2181
      - KAFKA_CLUSTERS_0_READONLY=false

  mariadb:
    image: mariadb:10.5.8
    container_name: mariadb_container-fc
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root   # Replace with your root password
      MYSQL_DATABASE: fc-db          # Replace with your desired database name
      MYSQL_USER: root                # Replace with your user name
      MYSQL_PASSWORD: root        # Replace with your user password
    ports:
      - "3306:3306"
    volumes:
      - mariadb_data:/var/lib/mysql        # Persist the database data

  redis-master-1:
    image: redis:7
    container_name: redis-master-1-fc
    ports:
      - "6379:6379"
    networks:
      - redis-net
    volumes:
      - ./data/master1:/data
    command: redis-server --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000

  redis-master-2:
    image: redis:7
    container_name: redis-master-2-fc
    ports:
      - "6380:6379"
    networks:
      - redis-net
    volumes:
      - ./data/master2:/data
    command: redis-server --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000

  redis-master-3:
    image: redis:7
    container_name: redis-master-3-fc
    ports:
      - "6381:6379"
    networks:
      - redis-net
    volumes:
      - ./data/master3:/data
    command: redis-server --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000

  redis-replica-1:
    image: redis:7
    container_name: redis-replica-1-fc
    ports:
      - "6382:6379"
    networks:
      - redis-net
    volumes:
      - ./data/replica1:/data
    command: redis-server --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000

  redis-replica-2:
    image: redis:7
    container_name: redis-replica-2-fc
    ports:
      - "6383:6379"
    networks:
      - redis-net
    volumes:
      - ./data/replica2:/data
    command: redis-server --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000

  redis-replica-3:
    image: redis:7
    container_name: redis-replica-3-fc
    ports:
      - "6384:6379"
    networks:
      - redis-net
    volumes:
      - ./data/replica3:/data
    command: redis-server --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000

networks:
  monitor-net:
    driver: bridge
  redis-net:
    driver: bridge

volumes:
  zookeeper-data:
  kafka-data1:
  kafka-data2:
  kafka-data3:
  mariadb_data: